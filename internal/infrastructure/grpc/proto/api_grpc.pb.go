// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HostMonitorServiceClient is the client API for HostMonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostMonitorServiceClient interface {
	GetStatistics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatisticsResponse, error)
}

type hostMonitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostMonitorServiceClient(cc grpc.ClientConnInterface) HostMonitorServiceClient {
	return &hostMonitorServiceClient{cc}
}

func (c *hostMonitorServiceClient) GetStatistics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatisticsResponse, error) {
	out := new(StatisticsResponse)
	err := c.cc.Invoke(ctx, "/api_pb.HostMonitorService/GetStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostMonitorServiceServer is the server API for HostMonitorService service.
// All implementations should embed UnimplementedHostMonitorServiceServer
// for forward compatibility
type HostMonitorServiceServer interface {
	GetStatistics(context.Context, *emptypb.Empty) (*StatisticsResponse, error)
}

// UnimplementedHostMonitorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHostMonitorServiceServer struct {
}

func (UnimplementedHostMonitorServiceServer) GetStatistics(context.Context, *emptypb.Empty) (*StatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}

// UnsafeHostMonitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostMonitorServiceServer will
// result in compilation errors.
type UnsafeHostMonitorServiceServer interface {
	mustEmbedUnimplementedHostMonitorServiceServer()
}

func RegisterHostMonitorServiceServer(s grpc.ServiceRegistrar, srv HostMonitorServiceServer) {
	s.RegisterService(&HostMonitorService_ServiceDesc, srv)
}

func _HostMonitorService_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostMonitorServiceServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.HostMonitorService/GetStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostMonitorServiceServer).GetStatistics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HostMonitorService_ServiceDesc is the grpc.ServiceDesc for HostMonitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostMonitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_pb.HostMonitorService",
	HandlerType: (*HostMonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatistics",
			Handler:    _HostMonitorService_GetStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
